//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportApp.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderProduct = new HashSet<OrderProduct>();
        }
    
        public int ProductID { get; set; }
        public string ProductArticleNumber { get; set; }
        public string ProductName { get; set; }
        public int UnitTypeID { get; set; }
        public decimal ProductCost { get; set; }
        public Nullable<byte> ProductMaxDiscountAmount { get; set; }
        public int ProductManufacturerID { get; set; }
        public int ProductSupplierID { get; set; }
        public int ProductCategoryID { get; set; }
        public Nullable<byte> ProductDiscountAmount { get; set; }
        public int ProductQuantityInStock { get; set; }
        public string ProductDescription { get; set; }
        public string ProductPhoto { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProduct { get; set; }
        public virtual ProductCategory ProductCategory { get; set; }
        public virtual ProductManufacturer ProductManufacturer { get; set; }
        public virtual ProductSupplier ProductSupplier { get; set; }
        public virtual UnitType UnitType { get; set; }

        public string GetBackgroundDiscount
        {
            get
            {
                return ProductMaxDiscountAmount > 15 ? "#7fff00" : "#ffffff";
            }
        }

        public string GetOldCost
        {
            get
            {
                return ProductDiscountAmount == null ? String.Empty : $"{ProductCost}";
            }
        }

        public string GetCurCost
        {
            get
            {
                return $"{this.ProductCost - (this.ProductCost * (this.ProductCost / 100))}";
            }
        }

        public string GetImage
        {
            get
            {
                string path = string.Empty;
                if (this.ProductPhoto == "")
                {
                    path = "Resources/picture.png";
                }
                else if (this.ProductPhoto.StartsWith("C:"))
                {
                    path = this.ProductPhoto;
                }
                else
                {
                    path = $"Resources/{this.ProductPhoto}";
                }
                return path;
            }
        }

        public string GetManufacturer
        {
            get
            {
                return "Поставщик: " + ProductManufacturer.ProductManufacturerName;
            }
        }
    }
}
